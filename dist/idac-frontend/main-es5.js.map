{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/app-routing.module.ts","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/models/Pass/Pass.ts","webpack:///src/app/models/User/User.ts","webpack:///src/app/pages/dashboard/dashboard.component.ts","webpack:///src/app/pages/dashboard/dashboard.component.html","webpack:///src/app/pages/external/change-password/change-password.component.html","webpack:///src/app/pages/external/change-password/change-password.component.ts","webpack:///src/app/pages/external/login/login.component.ts","webpack:///src/app/pages/external/login/login.component.html","webpack:///src/app/pages/external/no-page-found/no-page-found.component.ts","webpack:///src/app/pages/external/no-page-found/no-page-found.component.html","webpack:///src/app/pages/external/recover-password/recover-password.component.ts","webpack:///src/app/pages/external/recover-password/recover-password.component.html","webpack:///src/app/pages/external/register/register.component.ts","webpack:///src/app/pages/external/register/register.component.html","webpack:///src/app/pages/external/resend/resend.component.ts","webpack:///src/app/pages/external/resend/resend.component.html","webpack:///src/app/pages/pages-routing.module.ts","webpack:///src/app/pages/pages.component.ts","webpack:///src/app/pages/pages.component.html","webpack:///src/app/pages/pages.module.ts","webpack:///src/app/services/recover-pass.service.ts","webpack:///src/app/services/user.service.ts","webpack:///src/config/config.ts","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["map","webpackAsyncContext","req","Promise","resolve","then","__webpack_require__","o","e","Error","code","id","keys","webpackAsyncContextKeys","Object","module","exports","routes","path","component","loadChildren","redirectTo","pathMatch","AppRoutingModule","forRoot","imports","AppComponent","title","selector","templateUrl","styleUrls","AppModule","declarations","providers","bootstrap","Pass","password","User","email","nombre","codigo","role","img","google","setupPure","setupVrs","setupCraig","activo","DashboardComponent","userService","init_plugins","logout","ChangePasswordComponent","recoverPassService","activatedRoute","token","snapshot","paramMap","get","console","log","comprobarToken","checkToken","subscribe","usuario","formChange","required","minLength","password2","validators","sonIguales","invalid","fire","pass","value","cambiarContra","resp","campo1","campo2","group","pass1","controls","pass2","LoginComponent","router","recuerdame","localStorage","getItem","length","formLogin","remember","valid","recordar","usuarioLogin","undefined","loginUsuario","navigate","NoPageFoundComponent","RecoverPasswordComponent","formRecover","enviarEmailConfirmacion","RegisterComponent","formRegister","codIracing","maxLength","correo","crearUsuario","registrarUsuario","ResendComponent","formResend","reenviarEmailConfirmacion","reenviarEmail","children","PagesRoutingModule","forChild","PagesComponent","PagesModule","RecoverPassService","http","nuevaPass","url","post","pipe","err","message","error","errors","providedIn","UserService","cargarStorage","setItem","removeItem","userResp","cod_iracing","setup_pure","setup_vrs","setup_craig","_id","guardarStorage","JSON","parse","stringify","URL_SERVICIOS","environment","production","bootstrapModule"],"mappings":";;;;;;;;;;;;;;;;;AAAA,QAAIA,GAAG,GAAG;AACT,8BAAwB;AADf,KAAV;;AAIA,aAASC,mBAAT,CAA6BC,GAA7B,EAAkC;AACjC,aAAOC,OAAO,CAACC,OAAR,GAAkBC,IAAlB,CAAuB,YAAW;AACxC,YAAG,CAACC,mBAAmB,CAACC,CAApB,CAAsBP,GAAtB,EAA2BE,GAA3B,CAAJ,EAAqC;AACpC,cAAIM,CAAC,GAAG,IAAIC,KAAJ,CAAU,yBAAyBP,GAAzB,GAA+B,GAAzC,CAAR;AACAM,WAAC,CAACE,IAAF,GAAS,kBAAT;AACA,gBAAMF,CAAN;AACA;;AAED,YAAIG,EAAE,GAAGX,GAAG,CAACE,GAAD,CAAZ;AACA,eAAOI,mBAAmB,CAACK,EAAD,CAA1B;AACA,OATM,CAAP;AAUA;;AACDV,uBAAmB,CAACW,IAApB,GAA2B,SAASC,uBAAT,GAAmC;AAC7D,aAAOC,MAAM,CAACF,IAAP,CAAYZ,GAAZ,CAAP;AACA,KAFD;;AAGAC,uBAAmB,CAACU,EAApB,GAAyB,yCAAzB;AACAI,UAAM,CAACC,OAAP,GAAiBf,mBAAjB;;;;;;;;;;;;;;;;ACpBA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA,2D,CAGA;;;AAUA,QAAMgB,MAAM,GAAW,CACnB;AAAEC,UAAI,EAAE,OAAR;AAAiBC,eAAS,EAAE;AAA5B,KADmB,EAEnB;AAAED,UAAI,EAAE,UAAR;AAAoBC,eAAS,EAAE;AAA/B,KAFmB,EAGnB;AAAED,UAAI,EAAE,SAAR;AAAmBC,eAAS,EAAE;AAA9B,KAHmB,EAInB;AAAED,UAAI,EAAE,QAAR;AAAkBC,eAAS,EAAE;AAA7B,KAJmB,EAKnB;AAAED,UAAI,EAAE,mBAAR;AAA6BC,eAAS,EAAE;AAAxC,KALmB,EAMnB;AAAED,UAAI,EAAE,OAAR;AAAiBE,kBAAY,EAAE;AAA/B,KANmB,EAOnB;AAAEF,UAAI,EAAE,EAAR;AAAYG,gBAAU,EAAE,OAAxB;AAAiCC,eAAS,EAAE;AAA5C,KAPmB,EAQnB;AAAEJ,UAAI,EAAE,IAAR;AAAcC,eAAS,EAAE;AAAzB,KARmB,CAAvB;;QAgBaI,gB;;;;;YAAAA;;;;yBAAAA,gB;AAAgB,O;AAAA,gBAJhB,CAAC,6DAAaC,OAAb,CAAqBP,MAArB,CAAD,CAIgB,EAHf,4DAGe;;;;0HAAhBM,gB,EAAgB;AAAA;AAAA,kBAHf,4DAGe;AAAA,O;AAHH,K;;;;;sEAGbA,gB,EAAgB;cAL5B,sDAK4B;eALnB;AACNE,iBAAO,EAAE,CAAC,6DAAaD,OAAb,CAAqBP,MAArB,CAAD,CADH;AAEND,iBAAO,EAAE,CAAC,4DAAD;AAFH,S;AAKmB,Q;;;;;;;;;;;;;;;;;;AC7B7B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAOaU,Y,GALb;AAAA;;AAME,WAAAC,KAAA,GAAQ,eAAR;AACD,K;;;uBAFYD,Y;AAAY,K;;;YAAZA,Y;AAAY,+B;AAAA,c;AAAA,a;AAAA;AAAA;ACPzB;;;;;;;;;sEDOaA,Y,EAAY;cALxB,uDAKwB;eALd;AACTE,kBAAQ,EAAE,UADD;AAETC,qBAAW,EAAE,sBAFJ;AAGTC,mBAAS,EAAE,CAAC,sBAAD;AAHF,S;AAKc,Q;;;;;;;;;;;;;;;;;;AEPzB;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAUA;;;;;QAqCaC,S;;;;;YAAAA,S;AAAS,kBAHN,2DAGM;;;;yBAATA,S;AAAS,O;AAAA,iBALP,E;AACV,gBAXQ,CACL,uEADK,EAEL,kFAFK,EAGL,0DAHK,EAIL,kEAJK,EAKL,sEALK,EAML,4DANK,EAOL,oEAPK,EAQL,gEARK,CAWR;;;;0HAIQA,S,EAAS;AAAA,uBAtBd,2DAsBc,EArBd,oFAqBc,EApBd,6FAoBc,EAnBd,0GAmBc,EAlBpB,qHAkBoB,EAjBpB,kHAiBoB;AAjBG,kBAGjB,uEAHiB,EAIjB,kFAJiB,EAKjB,0DALiB,EAMjB,kEANiB,EAOjB,sEAPiB,EAQjB,4DARiB,EASjB,oEATiB,EAUjB,gEAViB;AAiBH,O;AAPH,K;;;;;sEAONA,S,EAAS;cAxBrB,sDAwBqB;eAxBZ;AACNC,sBAAY,EAAE,CACV,2DADU,EAEV,oFAFU,EAGV,6FAHU,EAIV,0GAJU,EAKhB,qHALgB,EAMhB,kHANgB,CADR;AASNP,iBAAO,EAAE,CACL,uEADK,EAEL,kFAFK,EAGL,0DAHK,EAIL,kEAJK,EAKL,sEALK,EAML,4DANK,EAOL,oEAPK,EAQL,gEARK,CATH;AAmBNQ,mBAAS,EAAE,EAnBL;AAqBNC,mBAAS,EAAE,CAAC,2DAAD;AArBL,S;AAwBY,Q;;;;;;;;;;;;;;;;;;AC/CtB;AAAA;;;AAAA;AAAA;AAAA;;QAAaC,I,GACT,cACWC,QADX,EAC4B;AAAA;;AAAjB,WAAAA,QAAA,GAAAA,QAAA;AACN,K;;;;;;;;;;;;;;;;;ACHT;AAAA;;;AAAA;AAAA;AAAA;;QAAaC,I,GACT,cACWC,KADX,EAEWF,QAFX,EAGWG,MAHX,EAIWC,MAJX,EAKWC,IALX,EAMWC,GANX,EAOWC,MAPX,EAQWC,SARX,EASWC,QATX,EAUWC,UAVX,EAWWC,MAXX,EAYWpC,EAZX,EAYsB;AAAA;;AAXX,WAAA2B,KAAA,GAAAA,KAAA;AACA,WAAAF,QAAA,GAAAA,QAAA;AACA,WAAAG,MAAA,GAAAA,MAAA;AACA,WAAAC,MAAA,GAAAA,MAAA;AACA,WAAAC,IAAA,GAAAA,IAAA;AACA,WAAAC,GAAA,GAAAA,GAAA;AACA,WAAAC,MAAA,GAAAA,MAAA;AACA,WAAAC,SAAA,GAAAA,SAAA;AACA,WAAAC,QAAA,GAAAA,QAAA;AACA,WAAAC,UAAA,GAAAA,UAAA;AACA,WAAAC,MAAA,GAAAA,MAAA;AACA,WAAApC,EAAA,GAAAA,EAAA;AACN,K;;;;;;;;;;;;;;;;;ACdT;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QASaqC,kB;AAET,kCACYC,WADZ,EACoC;AAAA;;AAAxB,aAAAA,WAAA,GAAAA,WAAA;AACP;;;;mCAEG;AACJC,sBAAY;AACf;;;iCAEK;AACF,eAAKD,WAAL,CAAiBE,MAAjB;AACH;;;;;;;uBAZQH,kB,EAAkB,mI;AAAA,K;;;YAAlBA,kB;AAAkB,oC;AAAA,c;AAAA,a;AAAA,gF;AAAA;AAAA;ACT/B;;AAAG;;AAAgB;;AACnB;;AAAG;AAAA,mBAAS,IAAAG,MAAA,EAAT;AAAiB,WAAjB;;AAAmC;;AAC9B;;AAAM;;;;;;;;sEDODH,kB,EAAkB;cAL9B,uDAK8B;eALpB;AACPpB,kBAAQ,EAAE,eADH;AAEPC,qBAAW,EAAE,4BAFN;AAGPC,mBAAS,EAAE,CAAC,4BAAD;AAHJ,S;AAKoB,Q;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AEUX;;AAEI;;AAAuB;;AAAiC;;AAC5D;;;;;;AACA;;AAEI;;AAAuB;;AAAyC;;AACpE;;;;QCbPsB,uB;AAMT,uCACYC,kBADZ,EAEYC,cAFZ,EAE0C;AAAA;;AAD9B,aAAAD,kBAAA,GAAAA,kBAAA;AACA,aAAAC,cAAA,GAAAA,cAAA;AAER,aAAKC,KAAL,GAAaD,cAAc,CAACE,QAAf,CAAwBC,QAAxB,CAAiCC,GAAjC,CAAqC,OAArC,CAAb;AACAC,eAAO,CAACC,GAAR,CAAY,KAAKL,KAAjB;AACA,aAAKM,cAAL,CAAoB,KAAKN,KAAzB;AACH;;;;uCAEoBA,K,EAAe;;;;;;;;;AAChC,2BAAM,KAAKF,kBAAL,CAAwBS,UAAxB,CAAmCP,KAAnC,EAA0CQ,SAA1C,CAAoD,UAACC,OAAD,EAAa;AACnE;AACA,2BAAI,CAAC1B,KAAL,GAAa0B,OAAO,CAAC1B,KAArB;AACH,qBAHK,CAAN;;;;;;;;;AAIH;;;mCAEO;AACJY,sBAAY;AACZ,eAAKe,UAAL,GAAkB,IAAI,wDAAJ,CAAc;AAC5B7B,oBAAQ,EAAE,IAAI,0DAAJ,CAAgB,IAAhB,EAAsB,CAAC,0DAAW8B,QAAZ,EAAsB,0DAAWC,SAAX,CAAqB,CAArB,CAAtB,CAAtB,CADkB;AAE5BC,qBAAS,EAAE,IAAI,0DAAJ,CAAgB,IAAhB,EAAsB,CAAC,0DAAWF,QAAZ,EAAsB,0DAAWC,SAAX,CAAqB,CAArB,CAAtB,CAAtB;AAFiB,WAAd,EAGf;AAAEE,sBAAU,EAAE,KAAKC,UAAL,CAAgB,UAAhB,EAA4B,WAA5B;AAAd,WAHe,CAAlB;AAIH;AAED;;;;;;wCAGgB;AACZX,iBAAO,CAACC,GAAR,CAAY,KAAKK,UAAjB;;AACA,cAAI,KAAKA,UAAL,CAAgBM,OAApB,EAA6B;AACzB,+DAAKC,IAAL,CAAU,mBAAV,EAA+B,+BAA/B,EAAgE,OAAhE;AACA;AACH;;AAED,cAAMC,IAAI,GAAG,IAAI,sDAAJ,CACT,KAAKR,UAAL,CAAgBS,KAAhB,CAAsBtC,QADb,CAAb;AAIA,eAAKiB,kBAAL,CAAwBsB,aAAxB,CAAsC,KAAKrC,KAA3C,EAAkD,KAAK2B,UAAL,CAAgBS,KAAhB,CAAsBtC,QAAxE,EAAkF,KAAKmB,KAAvF,EAA8FQ,SAA9F,CAAwG,UAACa,IAAD,EAAU,CAEjH,CAFD,EAXY,CAcZ;AACA;AACA;AACH;AAED;;;;;;;;mCAMWC,M,EAAgBC,M,EAAgB;AACvC,iBAAO,UAACC,KAAD,EAAsB;AACzB,gBAAMC,KAAK,GAAGD,KAAK,CAACE,QAAN,CAAeJ,MAAf,EAAuBH,KAArC;AACA,gBAAMQ,KAAK,GAAGH,KAAK,CAACE,QAAN,CAAeH,MAAf,EAAuBJ,KAArC;;AAEA,gBAAIM,KAAK,KAAKE,KAAd,EAAqB;AACjB,qBAAO,IAAP;AACH;;AACD,mBAAO;AACHZ,wBAAU,EAAE;AADT,aAAP;AAGH,WAVD;AAWH;;;;;;;uBAtEQlB,uB,EAAuB,kJ,EAAA,+H;AAAA,K;;;YAAvBA,uB;AAAuB,0C;AAAA,e;AAAA,a;AAAA,20B;AAAA;AAAA;ADbpC;;AACI;;AACI;;AACI;;AACI;;AAA6D;AAAA,mBAAY,IAAAuB,aAAA,EAAZ;AAA2B,WAA3B;;AAEzD;;AAA6B;;AAA8B;;AAC3D;;AACI;;AACI;;AAEJ;;AACJ;;AACA;;AACI;;AACI;;AAEJ;;AACJ;;AACA;;AAIA;;AAIA;;AACI;;AACI;;AACkB;;AAAkB;;AACxC;;AACJ;;AACJ;;AACJ;;AACJ;;AACJ;;AACJ;;;;AAhCoB;;AAAA;;AAeI;;AAAA;;AAIA;;AAAA;;;;;;;;;sECXXvB,uB,EAAuB;cALnC,uDAKmC;eALzB;AACPxB,kBAAQ,EAAE,qBADH;AAEPC,qBAAW,EAAE,kCAFN;AAGPC,mBAAS,EAAE,CAAC,kCAAD;AAHJ,S;AAKyB,Q;;;;;;;;;;;;;;;;;;;;;;;;ACbpC;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAaaqD,c;AAOT,8BACYlC,WADZ,EAEYmC,MAFZ,EAE0B;AAAA;;AADd,aAAAnC,WAAA,GAAAA,WAAA;AACA,aAAAmC,MAAA,GAAAA,MAAA;AALZ,aAAA9C,KAAA,GAAgB,EAAhB;AACA,aAAA+C,UAAA,GAAsB,KAAtB;AAKK;;;;mCAEG;AACJnC,sBAAY;AACZ,eAAKZ,KAAL,GAAagD,YAAY,CAACC,OAAb,CAAqB,WAArB,KAAqC,EAAlD;AACA5B,iBAAO,CAACC,GAAR,CAAY,KAAKtB,KAAjB;;AACA,cAAI,KAAKA,KAAL,CAAWkD,MAAX,GAAoB,CAAxB,EAA2B;AACvB,iBAAKH,UAAL,GAAkB,IAAlB;AACH;;AACD,eAAKI,SAAL,GAAiB,IAAI,wDAAJ,CAAc;AAC3BnD,iBAAK,EAAE,IAAI,0DAAJ,CAAgB,IAAhB,EAAsB,0DAAW4B,QAAjC,CADoB;AAE3B9B,oBAAQ,EAAE,IAAI,0DAAJ,CAAgB,IAAhB,EAAsB,0DAAW8B,QAAjC,CAFiB;AAG3BwB,oBAAQ,EAAE,IAAI,0DAAJ,CAAgB,IAAhB;AAHiB,WAAd,CAAjB;AAKH;;;uCAEc;AAAA;;AACX/B,iBAAO,CAACC,GAAR,CAAY,KAAK6B,SAAL,CAAef,KAAf,CAAqBpC,KAAjC;AACAqB,iBAAO,CAACC,GAAR,CAAY,KAAK6B,SAAL,CAAef,KAAf,CAAqBtC,QAAjC;AACAuB,iBAAO,CAACC,GAAR,CAAY,KAAK6B,SAAL,CAAef,KAAf,CAAqBgB,QAAjC;AACA/B,iBAAO,CAACC,GAAR,CAAY,KAAK6B,SAAL,CAAeE,KAA3B;AAEA,cAAIC,QAAQ,GAAY,KAAxB;;AACA,cAAI,KAAKH,SAAL,CAAeE,KAAf,KAAyB,KAA7B,EAAoC;AAEhC;AACH;;AACD,cAAME,YAAY,GAAS,IAAI,sDAAJ,CACvB,KAAKJ,SAAL,CAAef,KAAf,CAAqBpC,KADE,EAEvB,KAAKmD,SAAL,CAAef,KAAf,CAAqBtC,QAFE,CAA3B;;AAIA,cAAI,KAAKqD,SAAL,CAAef,KAAf,CAAqBgB,QAArB,KAAkCI,SAAtC,EAAiD;AAC7CF,oBAAQ,GAAG,KAAX;AACH,WAFD,MAEO;AACHA,oBAAQ,GAAG,KAAKH,SAAL,CAAef,KAAf,CAAqBgB,QAAhC;AACH;;AACD/B,iBAAO,CAACC,GAAR,CAAY,OAAZ;AACA,eAAKX,WAAL,CAAiB8C,YAAjB,CAA8BF,YAA9B,EAA4CD,QAA5C,EAAsD7B,SAAtD,CAAgE,YAAM;AAClE,kBAAI,CAACqB,MAAL,CAAYY,QAAZ,CAAqB,CAAC,QAAD,CAArB;AACH,WAFD;AAGH;;;;;;;uBAlDQb,c,EAAc,mI,EAAA,uH;AAAA,K;;;YAAdA,c;AAAc,gC;AAAA,e;AAAA,a;AAAA,ozD;AAAA;AAAA;ACV3B;;AAEI;;AACI;;AAEI;;AAAuB;AAAA,mBAAY,IAAAY,YAAA,EAAZ;AAA0B,WAA1B;;AACnB;;AAAoD;;AAC/B;;AAAM;;AAAuD;;AAClF;;AACI;;AACI;;AAAuF;AAAA;AAAA;;AAAvF;;AAEJ;;AACJ;;AACA;;AACI;;AACI;;AAEJ;;AACJ;;AACA;;AACI;;AACI;;AACI;;AAAO;AAAA;AAAA;;AAAP;;AAEA;;AAA8B;;AAAW;;AAC7C;;AACA;;AAAsE;;AAElE;;AAA4B;;AACpC;;AACJ;;AACA;;AACI;;AACI;;AACkB;;AAAQ;;AAC9B;;AACJ;;AAWA;;AACI;;AACI;;AAAmB;;AAAqD;;AAAG;;AAAU;;AAAI;;AAC7F;;AACJ;;AACA;;AACI;;AACI;;AAAwC;;AAAG;;AAA4B;;AAAI;;AAC/E;;AACJ;;AACJ;;AACA;;AACI;;AACI;;AACI;;AAAI;;AAAsB;;AAC1B;;AAAsB;;AAAuD;;AACjF;;AACJ;;AACA;;AACI;;AACI;;AACJ;;AACJ;;AACA;;AACI;;AACI;;AACkB;;AAAQ;;AAC9B;;AACJ;;AACJ;;AACJ;;AACJ;;AACJ;;;;AA3E+D;;AAAA;;AAKgD;;AAAA;;AAa5E;;AAAA;;;;;;;;;sEDbtBZ,c,EAAc;cAL1B,uDAK0B;eALhB;AACPvD,kBAAQ,EAAE,WADH;AAEPC,qBAAW,EAAE,wBAFN;AAGPC,mBAAS,EAAE,CAAC,wBAAD;AAHJ,S;AAKgB,Q;;;;;;;;;;;;;;;;;;;;;;;;AEb3B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAOamE,oB;AAEX,sCAAc;AAAA;AAAG;;;;mCAET,CACP;;;;;;;uBALUA,oB;AAAoB,K;;;YAApBA,oB;AAAoB,wC;AAAA,c;AAAA,a;AAAA;AAAA;ACPjC;;AAAG;;AAAoB;;;;;;;;sEDOVA,oB,EAAoB;cALhC,uDAKgC;eALtB;AACTrE,kBAAQ,EAAE,mBADD;AAETC,qBAAW,EAAE,gCAFJ;AAGTC,mBAAS,EAAE,CAAC,gCAAD;AAHF,S;AAKsB,Q;;;;;;;;;;;;;;;;;;;;AEPjC;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAYaoE,wB;AAIT,wCACY7C,kBADZ,EAEY+B,MAFZ,EAE0B;AAAA;;AADd,aAAA/B,kBAAA,GAAAA,kBAAA;AACA,aAAA+B,MAAA,GAAAA,MAAA;AACP;;;;mCAEG;AACJlC,sBAAY;AACZ,eAAKiD,WAAL,GAAmB,IAAI,wDAAJ,CAAc;AAC7B7D,iBAAK,EAAE,IAAI,0DAAJ,CAAgB,IAAhB,EAAsB,CAAC,0DAAW4B,QAAZ,EAAsB,0DAAW5B,KAAjC,CAAtB;AADsB,WAAd,CAAnB;AAGH;AAED;;;;;;kDAI0B;AAAA;;AACtB,eAAKe,kBAAL,CAAwB+C,uBAAxB,CAAgD,KAAKD,WAAL,CAAiBzB,KAAjB,CAAuBpC,KAAvE,EAA8EyB,SAA9E,CAAwF,UAAAa,IAAI,EAAI;AAC5F,kBAAI,CAACQ,MAAL,CAAYY,QAAZ,CAAqB,CAAC,QAAD,CAArB;AACH,WAFD;AAGH;;;;;;;uBAxBQE,wB,EAAwB,kJ,EAAA,uH;AAAA,K;;;YAAxBA,wB;AAAwB,2C;AAAA,e;AAAA,a;AAAA,qwB;AAAA;AAAA;ACZrC;;AACI;;AACI;;AACI;;AACI;;AAAuB;AAAA,mBAAY,IAAAE,uBAAA,EAAZ;AAAqC,WAArC;;AACnB;;AAA6B;;AAAoB;;AACjD;;AACI;;AACI;;AACJ;;AACJ;;AACA;;AACI;;AACI;;AACkB;;AAAiB;;AACvC;;AACJ;;AACA;;AACI;;AACI;;AAAG;;AAA+C;;AAAG;;AAAe;;AAAI;;AAAI;;AAChF;;AACJ;;AACJ;;AACJ;;AACJ;;AACJ;;AACJ;;;;AAtB8E;;AAAA;;;;;;;;;sEDQjEF,wB,EAAwB;cALpC,uDAKoC;eAL1B;AACPtE,kBAAQ,EAAE,sBADH;AAEPC,qBAAW,EAAE,mCAFN;AAGPC,mBAAS,EAAE,CAAC,mCAAD;AAHJ,S;AAK0B,Q;;;;;;;;;;;;;;;;;;;;;;;;AEZrC;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;ACmCgB;;AACI;;AAAuB;;AAAiC;;AAC5D;;;;QDvBHuE,iB;AAIT,iCACYpD,WADZ,EAEYmC,MAFZ,EAE0B;AAAA;;AADd,aAAAnC,WAAA,GAAAA,WAAA;AACA,aAAAmC,MAAA,GAAAA,MAAA;AACP;;;;mCAEG;AACJlC,sBAAY;AACZ,eAAKoD,YAAL,GAAoB,IAAI,wDAAJ,CAAc;AAC9BC,sBAAU,EAAE,IAAI,0DAAJ,CAAgB,IAAhB,EAAsB,CAAC,0DAAWrC,QAAZ,EAAsB,0DAAWC,SAAX,CAAqB,CAArB,CAAtB,EAA+C,0DAAWqC,SAAX,CAAqB,CAArB,CAA/C,CAAtB,CADkB;AAE9BjE,kBAAM,EAAE,IAAI,0DAAJ,CAAgB,IAAhB,EAAsB,CAAC,0DAAW2B,QAAZ,EAAsB,0DAAWC,SAAX,CAAqB,CAArB,CAAtB,CAAtB,CAFsB;AAG9BsC,kBAAM,EAAE,IAAI,0DAAJ,CAAgB,IAAhB,EAAsB,CAAC,0DAAWvC,QAAZ,EAAsB,0DAAW5B,KAAjC,CAAtB,CAHsB;AAI9BF,oBAAQ,EAAE,IAAI,0DAAJ,CAAgB,IAAhB,EAAsB,CAAC,0DAAW8B,QAAZ,EAAsB,0DAAWC,SAAX,CAAqB,CAArB,CAAtB,CAAtB,CAJoB;AAK9BC,qBAAS,EAAE,IAAI,0DAAJ,CAAgB,IAAhB,EAAsB,CAAC,0DAAWF,QAAZ,EAAsB,0DAAWC,SAAX,CAAqB,CAArB,CAAtB,CAAtB;AALmB,WAAd,EAMjB;AAAEE,sBAAU,EAAE,KAAKC,UAAL,CAAgB,UAAhB,EAA4B,WAA5B;AAAd,WANiB,CAApB;AAOH;AAED;;;;;;;2CAImB;AAAA;;AAEf,cAAI,KAAKgC,YAAL,CAAkB/B,OAAtB,EAA+B;AAC3B,+DAAKC,IAAL,CAAU,mBAAV,EAA+B,+BAA/B,EAAgE,OAAhE;AACA;AACH;;AAED,cAAMR,OAAO,GAAG,IAAI,sDAAJ,CACZ,KAAKsC,YAAL,CAAkB5B,KAAlB,CAAwB+B,MADZ,EAEZ,KAAKH,YAAL,CAAkB5B,KAAlB,CAAwBtC,QAFZ,EAGZ,KAAKkE,YAAL,CAAkB5B,KAAlB,CAAwBnC,MAHZ,EAIZ,KAAK+D,YAAL,CAAkB5B,KAAlB,CAAwB6B,UAJZ,CAAhB;AAOA,eAAKtD,WAAL,CAAiByD,YAAjB,CAA8B1C,OAA9B,EAAuCD,SAAvC,CAAiD,UAAAa,IAAI,EAAI;AACrD,kBAAI,CAACQ,MAAL,CAAYY,QAAZ,CAAqB,CAAC,QAAD,CAArB;AACH,WAFD;AAGH;AAED;;;;;;;;mCAMWnB,M,EAAgBC,M,EAAgB;AACvC,iBAAO,UAACC,KAAD,EAAsB;AACzB,gBAAMC,KAAK,GAAGD,KAAK,CAACE,QAAN,CAAeJ,MAAf,EAAuBH,KAArC;AACA,gBAAMQ,KAAK,GAAGH,KAAK,CAACE,QAAN,CAAeH,MAAf,EAAuBJ,KAArC;;AAEA,gBAAIM,KAAK,KAAKE,KAAd,EAAqB;AACjB,qBAAO,IAAP;AACH;;AACD,mBAAO;AACHZ,wBAAU,EAAE;AADT,aAAP;AAGH,WAVD;AAWH;;;;;;;uBA7DQ+B,iB,EAAiB,mI,EAAA,uH;AAAA,K;;;YAAjBA,iB;AAAiB,mC;AAAA,e;AAAA,a;AAAA,6iD;AAAA;AAAA;ACX9B;;AACI;;AACI;;AACI;;AAAuB;AAAA,mBAAY,IAAAM,gBAAA,EAAZ;AAA8B,WAA9B;;AACnB;;AAAoD;;AAAuD;;AAAK;;AAAuD;;AACvK;;AAAmC;;AAAU;;AAAK;;AAAO;;AAAyB;;AAClF;;AACI;;AACI;;AACJ;;AACJ;;AACA;;AACI;;AACI;;AACJ;;AACJ;;AACA;;AACI;;AACI;;AACJ;;AACJ;;AACA;;AACI;;AACI;;AACJ;;AACJ;;AACA;;AACI;;AACI;;AACJ;;AACJ;;AAEA;;AAWA;;AACI;;AACI;;AAAoG;;AAAW;;AACnH;;AACJ;;AACA;;AACI;;AACI;;AAAG;;AAAmB;;AAA+C;;AAAG;;AAAM;;AAAI;;AAAI;;AAC1F;;AACJ;;AACJ;;AACJ;;AACJ;;AACJ;;;;AArDmE;;AAAA;;AA6B3B;;AAAA;;;;;;;;;sEDrB3BN,iB,EAAiB;cAL7B,uDAK6B;eALnB;AACPzE,kBAAQ,EAAE,cADH;AAEPC,qBAAW,EAAE,2BAFN;AAGPC,mBAAS,EAAE,CAAC,2BAAD;AAHJ,S;AAKmB,Q;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;QEAjB8E,e;AAMT,+BACYvD,kBADZ,EACkD;AAAA;;AAAtC,aAAAA,kBAAA,GAAAA,kBAAA;AAEX;;;;uCAEoBE,K,EAAe;;;;;;;;;;;;AAEnC;;;mCAEO;AACJL,sBAAY;AACZ,eAAK2D,UAAL,GAAkB,IAAI,wDAAJ,CAAc;AAC5BvE,iBAAK,EAAE,IAAI,0DAAJ,CAAgB,IAAhB,EAAsB,CAAC,0DAAW4B,QAAZ,EAAsB,0DAAW5B,KAAjC,CAAtB;AADqB,WAAd,CAAlB;AAGH;AAED;;;;;;wCAGgB;AACZqB,iBAAO,CAACC,GAAR,CAAY,KAAKiD,UAAjB;;AACA,cAAI,KAAKA,UAAL,CAAgBtC,OAApB,EAA6B;AACzB,+DAAKC,IAAL,CAAU,mBAAV,EAA+B,+BAA/B,EAAgE,OAAhE;AACA;AACH;;AACDb,iBAAO,CAACC,GAAR,CAAY,KAAKiD,UAAL,CAAgBnC,KAAhB,CAAsBpC,KAAlC;AACA,eAAKe,kBAAL,CAAwByD,yBAAxB,CAAkD,KAAKD,UAAL,CAAgBnC,KAAhB,CAAsBpC,KAAxE,EAA+EyB,SAA/E,CAAyF,UAAAa,IAAI,EAAI;AAC7FjB,mBAAO,CAACC,GAAR,CAAYgB,IAAZ;AACH,WAFD;AAIH;AAED;;;;;;;;mCAMWC,M,EAAgBC,M,EAAgB;AACvC,iBAAO,UAACC,KAAD,EAAsB;AACzB,gBAAMC,KAAK,GAAGD,KAAK,CAACE,QAAN,CAAeJ,MAAf,EAAuBH,KAArC;AACA,gBAAMQ,KAAK,GAAGH,KAAK,CAACE,QAAN,CAAeH,MAAf,EAAuBJ,KAArC;;AAEA,gBAAIM,KAAK,KAAKE,KAAd,EAAqB;AACjB,qBAAO,IAAP;AACH;;AACD,mBAAO;AACHZ,wBAAU,EAAE;AADT,aAAP;AAGH,WAVD;AAWH;;;;;;;uBAxDQsC,e,EAAe,kJ;AAAA,K;;;YAAfA,e;AAAe,iC;AAAA,e;AAAA,a;AAAA,2tB;AAAA;AAAA;ACd5B;;AACI;;AACI;;AACI;;AACI;;AAA6D;AAAA,mBAAY,IAAAG,aAAA,EAAZ;AAA2B,WAA3B;;AAEzD;;AAA6B;;AAAmB;;AAChD;;AACI;;AACI;;AAEJ;;AACJ;;AACA;;AACI;;AACI;;AACkB;;AAAyB;;AAC/C;;AACJ;;AACA;;AACI;;AACI;;AAA+C;;AAAG;;AAAe;;AAAI;;AACzE;;AACJ;;AACJ;;AACJ;;AACJ;;AACJ;;AACJ;;;;AAvBoB;;AAAA;;;;;;;;;sEDSPH,e,EAAe;cAL3B,uDAK2B;eALjB;AACPhF,kBAAQ,EAAE,YADH;AAEPC,qBAAW,EAAE,yBAFN;AAGPC,mBAAS,EAAE,CAAC,yBAAD;AAHJ,S;AAKiB,Q;;;;;;;;;;;;;;;;;;;;;;AEd5B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAOA,QAAMb,MAAM,GAAW,CACnB;AACIC,UAAI,EAAE,EADV;AAEIC,eAAS,EAAE,+DAFf;AAGI6F,cAAQ,EAAE,CACN;AAAE9F,YAAI,EAAE,WAAR;AAAqBC,iBAAS,EAAE;AAAhC,OADM,EAEN;AAAED,YAAI,EAAE,EAAR;AAAYG,kBAAU,EAAE,WAAxB;AAAqCC,iBAAS,EAAE;AAAhD,OAFM;AAHd,KADmB,CAAvB;;QAgBa2F,kB;;;;;YAAAA;;;;yBAAAA,kB;AAAkB,O;AAAA,gBAHlB,CAAC,6DAAaC,QAAb,CAAsBjG,MAAtB,CAAD,CAGkB,EAFjB,4DAEiB;;;;0HAAlBgG,kB,EAAkB;AAAA;AAAA,kBAFjB,4DAEiB;AAAA,O;AAFL,K;;;;;sEAEbA,kB,EAAkB;cAJ9B,sDAI8B;eAJrB;AACNxF,iBAAO,EAAE,CAAC,6DAAayF,QAAb,CAAsBjG,MAAtB,CAAD,CADH;AAEND,iBAAO,EAAE,CAAC,4DAAD;AAFH,S;AAIqB,Q;;;;;;;;;;;;;;;;;;ACvB/B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAQamG,c;AAET,gCAAc;AAAA;AAAG;;;;mCAET;AACJjE,sBAAY;AACf;;;;;;;uBANQiE,c;AAAc,K;;;YAAdA,c;AAAc,gC;AAAA,c;AAAA,a;AAAA,gC;AAAA;AAAA;ACR3B;;AACI;;AACJ;;;;;;;;;sEDMaA,c,EAAc;cAL1B,uDAK0B;eALhB;AACPvF,kBAAQ,EAAE,WADH;AAEPC,qBAAW,EAAE,wBAFN;AAGPC,mBAAS,EAAE,CAAC,wBAAD;AAHJ,S;AAKgB,Q;;;;;;;;;;;;;;;;;;;;AER3B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;;AASA;;;;AAMA;;;;;QA0BasF,W;;;;;YAAAA;;;;yBAAAA,W;AAAW,O;AAAA,gBATX,CACL,wEADK,EAEL,4DAFK,EAGL,0DAHK,EAIL,kEAJK,EAKL,4DALK,CASW;;;;0HAAXA,W,EAAW;AAAA,uBAbhB,+DAagB,EAZhB,iFAYgB,EAXhB,iFAWgB;AAXD,kBAGf,wEAHe,EAIf,4DAJe,EAKf,0DALe,EAMf,kEANe,EAOf,4DAPe;AAWC,O;AAJJ,K;;;;;sEAIPA,W,EAAW;cAfvB,sDAeuB;eAfd;AACNpF,sBAAY,EAAE,CACV,+DADU,EAEV,iFAFU,EAGV,iFAHU,CADR;AAMNP,iBAAO,EAAE,CACL,wEADK,EAEL,4DAFK,EAGL,0DAHK,EAIL,kEAJK,EAKL,4DALK;AANH,S;AAec,Q;;;;;;;;;;;;;;;;;;ACzCxB;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAWa4F,kB;AAIT,kCACYC,IADZ,EAEYlC,MAFZ,EAE0B;AAAA;;AADd,aAAAkC,IAAA,GAAAA,IAAA;AACA,aAAAlC,MAAA,GAAAA,MAAA;AACP;AAEL;;;;;;;;;sCAMc9C,K,EAAeiF,S,EAAmBhE,K,EAAe;AAAA;;AAC3D,cAAIiE,GAAG,GAAG,kEAAgB,qBAA1B;AACAA,aAAG,GAAGA,GAAG,GAAG,SAAN,GAAkBjE,KAAxB;AACA,iBAAO,KAAK+D,IAAL,CAAUG,IAAV,CAAeD,GAAf,EAAoB;AAAElF,iBAAK,EAALA,KAAF;AAASF,oBAAQ,EAAEmF;AAAnB,WAApB,EAAoDG,IAApD,CACH,2DAAI,UAAC9C,IAAD,EAAe;AACf,+DAAKJ,IAAL,CAAU,qBAAV,EAAiC,mCAAjC,EAAsE,SAAtE;;AACA,kBAAI,CAACY,MAAL,CAAYY,QAAZ,CAAqB,CAAC,QAAD,CAArB;;AACA,mBAAOpB,IAAI,CAACZ,OAAZ;AACH,WAJD,CADG,EAKC,kEAAW,UAAC2D,GAAD,EAAS;AACpB,+DAAKnD,IAAL,CAAU,4BAAV,EAAwC,eAAemD,GAAG,CAACC,OAA3D,EAAoE,OAApE;AACA,mBAAO,wDAAWD,GAAX,CAAP;AACH,WAHG,CALD,CAAP;AAUH;AAED;;;;;;;gDAKwBrF,K,EAAe;AACnC,cAAMkF,GAAG,GAAG,kEAAgB,kBAA5B;AACA7D,iBAAO,CAACC,GAAR,CAAYtB,KAAZ;AACA,iBAAO,KAAKgF,IAAL,CAAUG,IAAV,CAAeD,GAAf,EAAoB;AAAElF,iBAAK,EAALA;AAAF,WAApB,EAA+BoF,IAA/B,CAAoC,2DAAI,UAAC9C,IAAD,EAAe;AAC1D,+DAAKJ,IAAL,CAAU,eAAV,EAA2B,oDAA3B,EAAiF,SAAjF;AACH,WAF0C,CAApC,EAEH,kEAAW,UAACmD,GAAD,EAAS;AAEpB,+DAAKnD,IAAL,CAAU,6BAAV,EAAyCmD,GAAG,CAACE,KAAJ,CAAUD,OAAnD,EAA4D,OAA5D;AACA,mBAAO,wDAAWD,GAAG,CAACC,OAAf,CAAP;AACH,WAJG,CAFG,CAAP;AAQH;AAED;;;;;;;kDAK0BtF,K,EAAe;AACrC,cAAMkF,GAAG,GAAG,kEAAgB,sBAA5B;AACA7D,iBAAO,CAACC,GAAR,CAAYtB,KAAZ;AACA,iBAAO,KAAKgF,IAAL,CAAUG,IAAV,CAAeD,GAAf,EAAoB;AAAElF,iBAAK,EAALA;AAAF,WAApB,EAA+BoF,IAA/B,CAAoC,2DAAI,UAAC9C,IAAD,EAAe;AAC1D,+DAAKJ,IAAL,CAAU,+BAAV,EAA2C,2CAA3C,EAAwF,SAAxF;AACH,WAF0C,CAApC,EAEH,kEAAW,UAACmD,GAAD,EAAS;AACpBhE,mBAAO,CAACC,GAAR,CAAY+D,GAAZ;AACA,+DAAKnD,IAAL,CAAU,6BAAV,EAAyCmD,GAAG,CAACE,KAAJ,CAAUD,OAAnD,EAA4D,OAA5D;AACA,mBAAO,wDAAWD,GAAG,CAACC,OAAf,CAAP;AACH,WAJG,CAFG,CAAP;AAQH;AAGD;;;;;;;mCAIWrE,K,EAAe;AAAA;;AACtB,cAAIiE,GAAG,GAAG,kEAAgB,UAA1B;AACAA,aAAG,GAAGA,GAAG,GAAG,cAAN,GAAuBjE,KAA7B;AACA,iBAAO,KAAK+D,IAAL,CAAU5D,GAAV,CAAc8D,GAAd,EAAmBE,IAAnB,CAAwB,2DAAI,UAAC9C,IAAD,EAAe;AAC9C;AACA,mBAAOA,IAAI,CAACZ,OAAZ;AACH,WAH8B,CAAxB,EAGH,kEAAW,UAAC2D,GAAD,EAAS;AACpBhE,mBAAO,CAACC,GAAR,CAAY+D,GAAZ;AACA,+DAAKnD,IAAL,CAAU,0BAAV,EAAsCmD,GAAG,CAACE,KAAJ,CAAUC,MAAV,CAAiBF,OAAvD,EAAgE,OAAhE;;AACA,kBAAI,CAACxC,MAAL,CAAYY,QAAZ,CAAqB,CAAC,QAAD,CAArB;;AACA,mBAAO,wDAAW2B,GAAX,CAAP;AACH,WALG,CAHG,CAAP;AAUH;;;;;;;uBApFQN,kB,EAAkB,uH,EAAA,8G;AAAA,K;;;aAAlBA,kB;AAAkB,eAAlBA,kBAAkB,K;AAAA,kBAFf;;;;;sEAEHA,kB,EAAkB;cAH9B,wDAG8B;eAHnB;AACRU,oBAAU,EAAE;AADJ,S;AAGmB,Q;;;;;;;;;;;;;;;;;;;;;;;;ACX/B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAYaC,W;AAIT,2BACYV,IADZ,EAEYlC,MAFZ,EAE0B;AAAA;;AADd,aAAAkC,IAAA,GAAAA,IAAA;AACA,aAAAlC,MAAA,GAAAA,MAAA;AAER,aAAK6C,aAAL;AACH;;;;qCAGYjE,O,EAAe;AACxB,cAAMwD,GAAG,GAAG,+DAAgB,UAA5B;AACA,iBAAO,KAAKF,IAAL,CAAUG,IAAV,CAAeD,GAAf,EAAoBxD,OAApB,EAA6B0D,IAA7B,CAAkC,2DAAI,UAAC9C,IAAD,EAAe;AACxD,+DAAKJ,IAAL,CAAU,oBAAV,EAAgCI,IAAI,CAACgD,OAArC,EAA8C,SAA9C;AACA,mBAAOhD,IAAI,CAACZ,OAAZ;AACH,WAHwC,CAAlC,EAGH,kEAAW,UAAC2D,GAAD,EAAS;AACpBhE,mBAAO,CAACC,GAAR,CAAY+D,GAAZ;AACA,+DAAKnD,IAAL,CAAU,4BAAV,EAAwCmD,GAAG,CAACE,KAAJ,CAAUC,MAAV,CAAiBF,OAAzD,EAAkE,OAAlE;AACA,mBAAO,wDAAWD,GAAX,CAAP;AACH,WAJG,CAHG,CAAP;AASH;AAED;;;;;;;;;qCAOa3D,O,EAA0C;AAAA;;AAAA,cAA3B4B,QAA2B,uEAAP,KAAO;AACnD,cAAM4B,GAAG,GAAG,+DAAgB,QAA5B;AACA;;;;AAGA,cAAI5B,QAAJ,EAAc;AACVN,wBAAY,CAAC4C,OAAb,CAAqB,WAArB,EAAkClE,OAAO,CAAC1B,KAA1C;AACH,WAFD,MAEO;AACHgD,wBAAY,CAAC6C,UAAb,CAAwB,WAAxB;AACH;;AACDxE,iBAAO,CAACC,GAAR,CAAY,OAAZ;AACA,iBAAO,KAAK0D,IAAL,CAAUG,IAAV,CAAeD,GAAf,EAAoBxD,OAApB,EAA6B0D,IAA7B,CAAkC,2DAAI,UAAC9C,IAAD,EAAe;AACxD;AACAjB,mBAAO,CAACC,GAAR,CAAYgB,IAAZ;AACA,gBAAMwD,QAAQ,GAAS,IAAI,sDAAJ,CACnBxD,IAAI,CAACZ,OAAL,CAAa1B,KADM,EAEnBsC,IAAI,CAACZ,OAAL,CAAa5B,QAFM,EAGnBwC,IAAI,CAACZ,OAAL,CAAazB,MAHM,EAInBqC,IAAI,CAACZ,OAAL,CAAaqE,WAAb,CAAyB7F,MAJN,EAKnBoC,IAAI,CAACZ,OAAL,CAAavB,IALM,EAMnBmC,IAAI,CAACZ,OAAL,CAAatB,GANM,EAOnBkC,IAAI,CAACZ,OAAL,CAAarB,MAPM,EAQnBiC,IAAI,CAACZ,OAAL,CAAasE,UARM,EASnB1D,IAAI,CAACZ,OAAL,CAAauE,SATM,EAUnB3D,IAAI,CAACZ,OAAL,CAAawE,WAVM,EAWnB5D,IAAI,CAACZ,OAAL,CAAajB,MAXM,EAYnB6B,IAAI,CAACZ,OAAL,CAAayE,GAZM,CAAvB;;AAcA,kBAAI,CAACC,cAAL,CAAoB9D,IAAI,CAACZ,OAAL,CAAayE,GAAjC,EAAsC7D,IAAI,CAACrB,KAA3C,EAAkD6E,QAAlD;;AACA,mBAAOA,QAAP;AACH,WAnBwC,CAAlC,EAmBH,kEAAW,UAACT,GAAD,EAAS;AACpB,+DAAKnD,IAAL,CAAU,mBAAV,EAA+BmD,GAAG,CAACE,KAAJ,CAAUD,OAAzC,EAAkD,OAAlD;AACA,mBAAO,wDAAWD,GAAX,CAAP;AACH,WAHG,CAnBG,CAAP;AAwBH;AAED;;;;;;;wCAKgB;AACZ,cAAIrC,YAAY,CAACC,OAAb,CAAqB,WAArB,CAAJ,EAAuC;AACnC,iBAAKhC,KAAL,GAAa+B,YAAY,CAACC,OAAb,CAAqB,WAArB,CAAb;AACA,iBAAKvB,OAAL,GAAe2E,IAAI,CAACC,KAAL,CAAWtD,YAAY,CAACC,OAAb,CAAqB,aAArB,CAAX,CAAf;AACH,WAHD,MAGO;AACH,iBAAKhC,KAAL,GAAa,EAAb;AACA,iBAAKS,OAAL,GAAe,IAAf;AACH;AACJ;AAED;;;;;;;;;uCAOerD,E,EAAY4C,K,EAAeS,O,EAAe;AAErDsB,sBAAY,CAAC4C,OAAb,CAAqB,QAArB,EAA+BvH,EAA/B;AACA2E,sBAAY,CAAC4C,OAAb,CAAqB,WAArB,EAAkC3E,KAAlC;AACA;;;;;AAIA+B,sBAAY,CAAC4C,OAAb,CAAqB,aAArB,EAAoCS,IAAI,CAACE,SAAL,CAAe7E,OAAf,CAApC;AAEA,eAAKA,OAAL,GAAeA,OAAf;AACA,eAAKT,KAAL,GAAaA,KAAb;AACH;AAED;;;;;;iCAGS;AACL,eAAKS,OAAL,GAAe,IAAf;AACA,eAAKT,KAAL,GAAa,EAAb;AACA+B,sBAAY,CAAC6C,UAAb,CAAwB,WAAxB;AACA7C,sBAAY,CAAC6C,UAAb,CAAwB,aAAxB;AACA7C,sBAAY,CAAC6C,UAAb,CAAwB,QAAxB;AACA,eAAK/C,MAAL,CAAYY,QAAZ,CAAqB,CAAC,QAAD,CAArB;AACH;;;;;;;uBAnHQgC,W,EAAW,uH,EAAA,8G;AAAA,K;;;aAAXA,W;AAAW,eAAXA,WAAW,K;AAAA,kBAFR;;;;;sEAEHA,W,EAAW;cAHvB,wDAGuB;eAHZ;AACRD,oBAAU,EAAE;AADJ,S;AAGY,Q;;;;;;;;;;;;;;;;;;;;;;;;ACZxB;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AACO,QAAMe,aAAa,GAAG,sEAAYA,aAAlC;;;;;;;;;;;;;;;;ACDP;AAAA;;;AAAA;AAAA;AAAA,O,CAAA;AACA;AACA;;;AAEO,QAAMC,WAAW,GAAG;AACvBC,gBAAU,EAAE,KADW;AAEvBF,mBAAa,EAAE;AAFQ,KAApB;AAKP;;;;;;;AAOA;;;;;;;;;;;;;;;;;AChBA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAMA,QAAI,sEAAYE,UAAhB,EAA4B;AAC1B;AACD;;AAED,gFAAyBC,eAAzB,CAAyC,yDAAzC,WACS,UAAAtB,GAAG;AAAA,aAAIhE,OAAO,CAACkE,KAAR,CAAcF,GAAd,CAAJ;AAAA,KADZ","file":"main-es5.js","sourcesContent":["var map = {\n\t\"./pages/pages.module\": \"./src/app/pages/pages.module.ts\"\n};\n\nfunction webpackAsyncContext(req) {\n\treturn Promise.resolve().then(function() {\n\t\tif(!__webpack_require__.o(map, req)) {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t}\n\n\t\tvar id = map[req];\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";\nmodule.exports = webpackAsyncContext;","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\n// Páginas externas\n\nimport { LoginComponent } from './pages/external/login/login.component';\nimport { RegisterComponent } from './pages/external/register/register.component';\nimport { NoPageFoundComponent } from './pages/external/no-page-found/no-page-found.component';\nimport { RecoverPasswordComponent } from './pages/external/recover-password/recover-password.component';\nimport { ChangePasswordComponent } from './pages/external/change-password/change-password.component';\nimport { ResendComponent } from './pages/external/resend/resend.component';\n\n\nconst routes: Routes = [\n    { path: 'login', component: LoginComponent },\n    { path: 'register', component: RegisterComponent },\n    { path: 'recover', component: RecoverPasswordComponent },\n    { path: 'resend', component: ResendComponent },\n    { path: 'changePass/:token', component: ChangePasswordComponent },\n    { path: 'pages', loadChildren: './pages/pages.module#PagesModule' },\n    { path: '', redirectTo: 'login', pathMatch: 'full' },\n    { path: '**', component: NoPageFoundComponent }\n];\n\n@NgModule({\n    imports: [RouterModule.forRoot(routes)],\n    exports: [RouterModule]\n})\n\nexport class AppRoutingModule { }\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n  title = 'idac-frontend';\n}\n","<router-outlet></router-outlet>\n\n<!-- <div class=\"row\">\n    <div class=\"col-6\">\n        <div class=\"card\">\n            <div class=\"card-body\">\n\n            </div>\n        </div>\n    </div>\n</div> -->\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\n\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\n/**\n * Páginas de la web externas\n */\n\nimport { LoginComponent } from './pages/external/login/login.component';\nimport { RegisterComponent } from './pages/external/register/register.component';\nimport { NoPageFoundComponent } from './pages/external/no-page-found/no-page-found.component';\nimport { RecoverPasswordComponent } from './pages/external/recover-password/recover-password.component';\nimport { ChangePasswordComponent } from './pages/external/change-password/change-password.component';\n\nimport { HttpClientModule } from '@angular/common/http';\nimport { PagesModule } from './pages/pages.module';\n\n@NgModule({\n    declarations: [\n        AppComponent,\n        LoginComponent,\n        RegisterComponent,\n        NoPageFoundComponent,\n\t\tRecoverPasswordComponent,\n\t\tChangePasswordComponent\n    ],\n    imports: [\n        BrowserModule,\n        FontAwesomeModule,\n        FormsModule,\n        ReactiveFormsModule,\n        HttpClientModule,\n        RouterModule,\n        AppRoutingModule,\n        PagesModule\n    ],\n    providers: [\n    ],\n    bootstrap: [AppComponent]\n})\n\nexport class AppModule { }\n","export class Pass {\r\n    constructor(\r\n        public password?: string,\r\n    ) { }\r\n}\r\n","export class User {\r\n    constructor(\r\n        public email?: string,\r\n        public password?: string,\r\n        public nombre?: string,\r\n        public codigo?: string,\r\n        public role?: string,\r\n        public img?: string,\r\n        public google?: boolean,\r\n        public setupPure?: boolean,\r\n        public setupVrs?: boolean,\r\n        public setupCraig?: boolean,\r\n        public activo?: boolean,\r\n        public id?: string\r\n    ) { }\r\n}\r\n","import { Component, OnInit } from '@angular/core';\nimport { UserService } from '../../services/user.service';\n\ndeclare function init_plugins();\n@Component({\n    selector: 'app-dashboard',\n    templateUrl: './dashboard.component.html',\n    styleUrls: ['./dashboard.component.scss']\n})\nexport class DashboardComponent implements OnInit {\n\n    constructor(\n        private userService: UserService\n    ) { }\n\n    ngOnInit(): void {\n        init_plugins();\n    }\n\n    logout(){\n        this.userService.logout();\n    }\n\n}\n","<p>dashboard works!</p>\n<a (click)=\"logout()\" class=\"pointer\"><i class=\"fa fa-power-off pointer\"></i>\n        Logout</a>\n","<section id=\"wrapper\">\n    <div class=\"login-register\" style=\"background-image:url(../assets/images/background/login-register.jpg);\">\n        <div class=\"login-box card\">\n            <div class=\"card-body\">\n                <form class=\"form-horizontal form-material\" ngNativeValidate (ngSubmit)=\"cambiarContra()\"\n                    [formGroup]=\"formChange\" id=\"loginform\">\n                    <h3 class=\"box-title m-b-20\">Introduzca su nueva contraseña</h3>\n                    <div class=\"form-group \">\n                        <div class=\"col-xs-12\">\n                            <input formControlName=\"password\" fname=\"password\" class=\"form-control\" type=\"password\"\n                                required placeholder=\"Contraseña\">\n                        </div>\n                    </div>\n                    <div class=\"form-group\">\n                        <div class=\"col-xs-12\">\n                            <input formControlName=\"password2\" name=\"password2\" class=\"form-control\" type=\"password\"\n                                required placeholder=\"Confirma Contraseña\">\n                        </div>\n                    </div>\n                    <div class=\"form-group\"\n                        *ngIf=\"formChange.errors && formChange.errors?.sonIguales && !formChange.pristine\">\n                        <p class=\"text-danger\">Las contraseñas deben ser iguales</p>\n                    </div>\n                    <div class=\"form-group\"\n                        *ngIf=\"formChange.controls.password.errors && formChange.controls.password.errors?.minlength && !formChange.pristine\">\n                        <p class=\"text-danger\">El tamaño mínimo de la contraseña es de 6</p>\n                    </div>\n                    <div class=\"form-group text-center m-t-20\">\n                        <div class=\"col-xs-12\">\n                            <button class=\"btn btn-info btn-lg btn-block waves-effect waves-light\"\n                                type=\"submit\">Cambiar Contraseña</button>\n                        </div>\n                    </div>\n                </form>\n            </div>\n        </div>\n    </div>\n</section>\n","import { Component, OnInit } from '@angular/core';\nimport { FormGroup, Validators, FormControl } from '@angular/forms';\nimport Swal from 'sweetalert2';\nimport { Pass } from '../../../models/Pass/Pass';\nimport { ActivatedRoute } from '@angular/router';\nimport { RecoverPassService } from '../../../services/recover-pass.service';\n\ndeclare function init_plugins();\n@Component({\n    selector: 'app-change-password',\n    templateUrl: './change-password.component.html',\n    styleUrls: ['./change-password.component.scss']\n})\nexport class ChangePasswordComponent implements OnInit {\n\n    formChange: FormGroup;\n    token: string;\n    email: string;\n\n    constructor(\n        private recoverPassService: RecoverPassService,\n        private activatedRoute: ActivatedRoute\n    ) {\n        this.token = activatedRoute.snapshot.paramMap.get('token');\n        console.log(this.token);\n        this.comprobarToken(this.token);\n    }\n\n    async comprobarToken(token: string) {\n        await this.recoverPassService.checkToken(token).subscribe((usuario) => {\n            // console.log('Usuario validado', usuario);\n            this.email = usuario.email;\n        });\n    }\n\n    ngOnInit(): void {\n        init_plugins();\n        this.formChange = new FormGroup({\n            password: new FormControl(null, [Validators.required, Validators.minLength(6)]),\n            password2: new FormControl(null, [Validators.required, Validators.minLength(6)])\n        }, { validators: this.sonIguales('password', 'password2') });\n    }\n\n    /**\n     * Función que cambia la contraseña del usuario llamando al servicio de actualización\n     */\n    cambiarContra() {\n        console.log(this.formChange);\n        if (this.formChange.invalid) {\n            Swal.fire('Datos incorrectos', 'Revise los datos introducidos', 'error');\n            return;\n        }\n\n        const pass = new Pass(\n            this.formChange.value.password,\n        );\n\n        this.recoverPassService.cambiarContra(this.email, this.formChange.value.password, this.token).subscribe((resp) => {\n\n        });\n        // this.userService.crearUsuario(usuario).subscribe(resp => {\n        //     this.router.navigate(['/login']);\n        // });\n    }\n\n    /**\n     * Validador personalizado, retorna valido si son iguales los textos\n     * @param campo1 nombre del primer campo del formulario a comparar\n     * @param campo2 nombre del segundo campo del formulario a comparar\n     */\n\n    sonIguales(campo1: string, campo2: string) {\n        return (group: FormGroup) => {\n            const pass1 = group.controls[campo1].value;\n            const pass2 = group.controls[campo2].value;\n\n            if (pass1 === pass2) {\n                return null;\n            }\n            return {\n                sonIguales: true\n            };\n        };\n    }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\nimport { UserService } from '../../../services/user.service';\nimport { User } from '../../../models/User/User';\nimport { Router } from '@angular/router';\n\ndeclare function init_plugins();\n\n@Component({\n    selector: 'app-login',\n    templateUrl: './login.component.html',\n    styleUrls: ['./login.component.scss']\n})\nexport class LoginComponent implements OnInit {\n\n    formLogin: FormGroup;\n\n    email: string = '';\n    recuerdame: boolean = false;\n\n    constructor(\n        private userService: UserService,\n        private router: Router\n    ) { }\n\n    ngOnInit(): void {\n        init_plugins();\n        this.email = localStorage.getItem('emailIdac') || '';\n        console.log(this.email);\n        if (this.email.length > 1) {\n            this.recuerdame = true;\n        }\n        this.formLogin = new FormGroup({\n            email: new FormControl(null, Validators.required),\n            password: new FormControl(null, Validators.required),\n            remember: new FormControl(null),\n        });\n    }\n\n    loginUsuario() {\n        console.log(this.formLogin.value.email);\n        console.log(this.formLogin.value.password);\n        console.log(this.formLogin.value.remember);\n        console.log(this.formLogin.valid);\n\n        let recordar: boolean = false;\n        if (this.formLogin.valid === false) {\n\n            return;\n        }\n        const usuarioLogin: User = new User(\n            this.formLogin.value.email,\n            this.formLogin.value.password\n        );\n        if (this.formLogin.value.remember === undefined) {\n            recordar = false;\n        } else {\n            recordar = this.formLogin.value.remember;\n        }\n        console.log('entro');\n        this.userService.loginUsuario(usuarioLogin, recordar).subscribe(() => {\n            this.router.navigate(['/pages']);\n        });\n    }\n}\n","<!-- ============================================================== -->\n<!-- Main wrapper - style you can find in pages.scss -->\n<!-- ============================================================== -->\n<section id=\"wrapper\" class=\"login-register login-sidebar\"\n    style=\"background-image:url(../assets/images/background/login-register.jpg);\">\n    <div class=\"login-box card\">\n        <div class=\"card-body\">\n            <!-- Validaciones por defecto del navegador: ngNativeValidate -->\n            <form ngNativeValidate (ngSubmit)=\"loginUsuario()\" [formGroup]=\"formLogin\" name=\"formLogin\" class=\"form-horizontal form-material\">\n                <a href=\"javascript:void(0)\" class=\"text-center db\"><img src=\"../assets/images/logo-icon.png\"\n                        alt=\"Home\" /><br /><img src=\"../assets/images/logo-text.png\" alt=\"Home\" /></a>\n                <div class=\"form-group m-t-40\">\n                    <div class=\"col-xs-12\">\n                        <input formControlName=\"email\" name=\"email\" class=\"form-control\" type=\"email\" required [(ngModel)]=\"email\"\n                            placeholder=\"Correo del usuario\">\n                    </div>\n                </div>\n                <div class=\"form-group\">\n                    <div class=\"col-xs-12\">\n                        <input formControlName=\"password\" name=\"password\" class=\"form-control\" type=\"password\" required\n                            placeholder=\"Contraseña\">\n                    </div>\n                </div>\n                <div class=\"form-group row\">\n                    <div class=\"col-md-12\">\n                        <div class=\"checkbox checkbox-primary pull-left p-t-0\">\n                            <input [(ngModel)]=\"recuerdame\" formControlName=\"remember\" name=\"recuerdame\" id=\"checkbox-signup\" type=\"checkbox\"\n                                class=\"filled-in chk-col-light-blue\">\n                            <label for=\"checkbox-signup\"> Recuérdame </label>\n                        </div>\n                        <a routerLink=\"/recover\" id=\"to-recover\" class=\"text-dark pull-right\"><i\n                                class=\"fa fa-lock m-r-5\"></i>\n                            ¿Has olvidado la contraseña?</a>\n                    </div>\n                </div>\n                <div class=\"form-group text-center m-t-20\">\n                    <div class=\"col-xs-12\">\n                        <button class=\"btn btn-info btn-lg btn-block text-uppercase btn-rounded\"\n                            type=\"submit\">Ingresar</button>\n                    </div>\n                </div>\n                <!-- Login google -->\n                <!-- <div class=\"row\">\n                    <div class=\"col-xs-12 col-sm-12 col-md-12 m-t-10 text-center\">\n                        <div class=\"social\">\n                            <button type=\"button\" href=\"\" id=\"btnGoogle\" class=\"btn btn-googleplus\"\n                                data-toggle=\"tooltip\" title=\"Iniciar Sesión con Google\">\n                                <i aria-hidden=\"true\" class=\"fa fa-google-plus\"></i> </button>\n                        </div>\n                    </div>\n                </div> -->\n                <div class=\"form-group m-b-0\">\n                    <div class=\"col-sm-12 text-center\">\n                        ¿No tienes cuenta? <a routerLink=\"/register\" class=\"text-primary m-l-5\"><b>Regístrate</b></a>\n                    </div>\n                </div>\n                <div class=\"form-group m-b-0\">\n                    <div class=\"col-sm-12 text-center\">\n                        <a routerLink=\"/resend\" class=\"text-sm\"><b>Reenviar correo confirmación</b></a>\n                    </div>\n                </div>\n            </form>\n            <form class=\"form-horizontal\" id=\"recoverform\" action=\"index.html\">\n                <div class=\"form-group \">\n                    <div class=\"col-xs-12\">\n                        <h3>Recupera la contraseña</h3>\n                        <p class=\"text-muted\">Introduce tu correo y se te enviarán las instrucciones </p>\n                    </div>\n                </div>\n                <div class=\"form-group \">\n                    <div class=\"col-xs-12\">\n                        <input class=\"form-control\" type=\"text\" required=\"\" placeholder=\"Email\">\n                    </div>\n                </div>\n                <div class=\"form-group text-center m-t-20\">\n                    <div class=\"col-xs-12\">\n                        <button class=\"btn btn-primary btn-lg btn-block text-uppercase waves-effect waves-light\"\n                            type=\"submit\">Resetear</button>\n                    </div>\n                </div>\n            </form>\n        </div>\n    </div>\n</section>\n<!-- ============================================================== -->\n<!-- End Wrapper -->\n<!-- ============================================================== -->\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-no-page-found',\n  templateUrl: './no-page-found.component.html',\n  styleUrls: ['./no-page-found.component.scss']\n})\nexport class NoPageFoundComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<p>no-page-found works!</p>\n","import { Component, OnInit } from '@angular/core';\nimport { RecoverPassService } from '../../../services/recover-pass.service';\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\n\n\ndeclare function init_plugins();\n@Component({\n    selector: 'app-recover-password',\n    templateUrl: './recover-password.component.html',\n    styleUrls: ['./recover-password.component.scss']\n})\nexport class RecoverPasswordComponent implements OnInit {\n\n    formRecover: FormGroup;\n\n    constructor(\n        private recoverPassService: RecoverPassService,\n        private router: Router\n    ) { }\n\n    ngOnInit(): void {\n        init_plugins();\n        this.formRecover = new FormGroup({\n            email: new FormControl(null, [Validators.required, Validators.email])\n        });\n    }\n\n    /**\n     * Función que llama al servicio de recuperación para enviar el email de recuperación de la contraseña\n     */\n\n    enviarEmailConfirmacion() {\n        this.recoverPassService.enviarEmailConfirmacion(this.formRecover.value.email).subscribe(resp => {\n            this.router.navigate(['/login']);\n        });\n    }\n}\n","<section id=\"wrapper\">\n    <div class=\"login-register\" style=\"background-image:url(../assets/images/background/login-register.jpg);\">\n        <div class=\"login-box card\">\n            <div class=\"card-body\">\n                <form ngNativeValidate (ngSubmit)=\"enviarEmailConfirmacion()\" [formGroup]=\"formRecover\"  class=\"form-horizontal form-material\" id=\"formRecover\" action=\"index.html\">\n                    <h3 class=\"box-title m-b-20\">Recuperar Contraseña</h3>\n                    <div class=\"form-group\">\n                        <div class=\"col-xs-12\">\n                            <input formControlName=\"email\" name=\"email\"  class=\"form-control\" type=\"text\" required placeholder=\"Email\">\n                        </div>\n                    </div>\n                    <div class=\"form-group text-center p-b-10\">\n                        <div class=\"col-xs-12\">\n                            <button class=\"btn btn-info btn-lg btn-block text-uppercase waves-effect waves-light\"\n                                type=\"submit\">Envíar contraseña</button>\n                        </div>\n                    </div>\n                    <div class=\"form-group m-b-0\">\n                        <div class=\"col-sm-12 text-center\">\n                            <p><a routerLink=\"/login\" class=\"text-info m-l-5\"><b>Volver al login</b></a></p>\n                        </div>\n                    </div>\n                </form>\n            </div>\n        </div>\n    </div>\n</section>\n","import { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\nimport { UserService } from '../../../services/user.service';\nimport { Router } from '@angular/router';\nimport { User } from '../../../models/User/User';\nimport Swal from 'sweetalert2';\n\ndeclare function init_plugins();\n\n@Component({\n    selector: 'app-register',\n    templateUrl: './register.component.html',\n    styleUrls: ['./register.component.scss']\n})\nexport class RegisterComponent implements OnInit {\n\n    formRegister: FormGroup;\n\n    constructor(\n        private userService: UserService,\n        private router: Router\n    ) { }\n\n    ngOnInit(): void {\n        init_plugins();\n        this.formRegister = new FormGroup({\n            codIracing: new FormControl(null, [Validators.required, Validators.minLength(6), Validators.maxLength(6)]),\n            nombre: new FormControl(null, [Validators.required, Validators.minLength(6)]),\n            correo: new FormControl(null, [Validators.required, Validators.email]),\n            password: new FormControl(null, [Validators.required, Validators.minLength(6)]),\n            password2: new FormControl(null, [Validators.required, Validators.minLength(6)])\n        }, { validators: this.sonIguales('password', 'password2') });\n    }\n\n    /**\n     * Función que llama al servicio de usuarios para registrar un nuevo\n     * piloto en la base de datos, si el usuario es incorrecto sale.\n     */\n    registrarUsuario() {\n\n        if (this.formRegister.invalid) {\n            Swal.fire('Datos incorrectos', 'Revise los datos introducidos', 'error');\n            return;\n        }\n\n        const usuario = new User(\n            this.formRegister.value.correo,\n            this.formRegister.value.password,\n            this.formRegister.value.nombre,\n            this.formRegister.value.codIracing\n        );\n\n        this.userService.crearUsuario(usuario).subscribe(resp => {\n            this.router.navigate(['/login']);\n        });\n    }\n\n    /**\n     * Validador personalizado, retorna valido si son iguales los textos\n     * @param campo1 nombre del primer campo del formulario a comparar\n     * @param campo2 nombre del segundo campo del formulario a comparar\n     */\n\n    sonIguales(campo1: string, campo2: string) {\n        return (group: FormGroup) => {\n            const pass1 = group.controls[campo1].value;\n            const pass2 = group.controls[campo2].value;\n\n            if (pass1 === pass2) {\n                return null;\n            }\n            return {\n                sonIguales: true\n            };\n        };\n    }\n\n}\n","<!-- ============================================================== -->\n<!-- Main wrapper - style you can find in pages.scss -->\n<!-- ============================================================== -->\n<section id=\"wrapper\" class=\"login-register login-sidebar\" style=\"background-image:url(../assets/images/background/login-register.jpg);\">\n    <div class=\"login-box card\">\n        <div class=\"card-body\">\n            <form ngNativeValidate (ngSubmit)=\"registrarUsuario()\" [formGroup]=\"formRegister\" id=\"loginform\" action=\"index.html\">\n                <a href=\"javascript:void(0)\" class=\"text-center db\"><img src=\"../assets/images/logo-icon.png\" alt=\"Home\" /><br/><img src=\"../assets/images/logo-text.png\" alt=\"Home\" /></a>\n                <h3 class=\"box-title m-t-40 m-b-0\">Regístrate</h3><small>Crea tu cuenta y disfruta</small>\n                <div class=\"form-group m-t-20\">\n                    <div class=\"col-xs-12\">\n                        <input formControlName=\"codIracing\" name=\"codIracing\" class=\"form-control\" type=\"text\" required placeholder=\"Código de iracing\">\n                    </div>\n                </div>\n                <div class=\"form-group m-t-20\">\n                    <div class=\"col-xs-12\">\n                        <input formControlName=\"nombre\" name=\"nombre\" class=\"form-control\" type=\"text\" required placeholder=\"Nombre\">\n                    </div>\n                </div>\n                <div class=\"form-group \">\n                    <div class=\"col-xs-12\">\n                        <input formControlName=\"correo\" name=\"correo\" class=\"form-control\" type=\"email\" required placeholder=\"Correo\">\n                    </div>\n                </div>\n                <div class=\"form-group \">\n                    <div class=\"col-xs-12\">\n                        <input formControlName=\"password\" fname=\"password\" class=\"form-control\" type=\"password\" required placeholder=\"Contraseña\">\n                    </div>\n                </div>\n                <div class=\"form-group\">\n                    <div class=\"col-xs-12\">\n                        <input formControlName=\"password2\" name=\"password2\" class=\"form-control\" type=\"password\" required placeholder=\"Confirma Contraseña\">\n                    </div>\n                </div>\n                <!--  -->\n                <div class=\"form-group\" *ngIf=\"formRegister.errors && formRegister.errors?.sonIguales && !formRegister.pristine\">\n                    <p class=\"text-danger\">Las contraseñas deben ser iguales</p>\n                </div>\n                <!-- <div class=\"form-group row\">\n                    <div class=\"col-md-12\">\n                        <div class=\"checkbox checkbox-primary p-t-0\">\n                            <input  name=\"condiciones\" id=\"checkbox-signup\" type=\"checkbox\">\n                            <label for=\"checkbox-signup\"> Acepto todos los <a href=\"#\">términos</a></label>\n                        </div>\n                    </div>\n                </div> -->\n                <div class=\"form-group text-center m-t-20\">\n                    <div class=\"col-xs-12\">\n                        <button class=\"btn btn-info btn-lg btn-block text-uppercase waves-effect waves-light\" type=\"submit\">Registrarme</button>\n                    </div>\n                </div>\n                <div class=\"form-group m-b-0\">\n                    <div class=\"col-sm-12 text-center\">\n                        <p>¿Ya tienes cuenta? <a routerLink=\"/login\" class=\"text-info m-l-5\"><b>Accede</b></a></p>\n                    </div>\n                </div>\n            </form>\n        </div>\n    </div>\n</section>\n<!-- ============================================================== -->\n<!-- End Wrapper -->\n<!-- ============================================================== -->\n","import { Component, OnInit } from '@angular/core';\nimport { FormGroup, Validators, FormControl } from '@angular/forms';\nimport Swal from 'sweetalert2';\nimport { Pass } from '../../../models/Pass/Pass';\nimport { UserService } from '../../../services/user.service';\nimport { ActivatedRoute } from '@angular/router';\nimport { RecoverPassService } from '../../../services/recover-pass.service';\n\ndeclare function init_plugins();\n@Component({\n    selector: 'app-resend',\n    templateUrl: './resend.component.html',\n    styleUrls: ['./resend.component.scss']\n})\nexport class ResendComponent implements OnInit {\n\n    formResend: FormGroup;\n\n    email: string;\n\n    constructor(\n        private recoverPassService: RecoverPassService,\n    ) {\n    }\n\n    async comprobarToken(token: string) {\n\n    }\n\n    ngOnInit(): void {\n        init_plugins();\n        this.formResend = new FormGroup({\n            email: new FormControl(null, [Validators.required, Validators.email])\n        });\n    }\n\n    /**\n     * Función que cambia la contraseña del usuario llamando al servicio de actualización\n     */\n    reenviarEmail() {\n        console.log(this.formResend);\n        if (this.formResend.invalid) {\n            Swal.fire('Datos incorrectos', 'Revise los datos introducidos', 'error');\n            return;\n        }\n        console.log(this.formResend.value.email);\n        this.recoverPassService.reenviarEmailConfirmacion(this.formResend.value.email).subscribe(resp => {\n            console.log(resp);\n        });\n\n    }\n\n    /**\n     * Validador personalizado, retorna valido si son iguales los textos\n     * @param campo1 nombre del primer campo del formulario a comparar\n     * @param campo2 nombre del segundo campo del formulario a comparar\n     */\n\n    sonIguales(campo1: string, campo2: string) {\n        return (group: FormGroup) => {\n            const pass1 = group.controls[campo1].value;\n            const pass2 = group.controls[campo2].value;\n\n            if (pass1 === pass2) {\n                return null;\n            }\n            return {\n                sonIguales: true\n            };\n        };\n    }\n}\n","<section id=\"wrapper\">\n    <div class=\"login-register\" style=\"background-image:url(../assets/images/background/login-register.jpg);\">\n        <div class=\"login-box card\">\n            <div class=\"card-body\">\n                <form class=\"form-horizontal form-material\" ngNativeValidate (ngSubmit)=\"reenviarEmail()\"\n                    [formGroup]=\"formResend\" id=\"loginform\">\n                    <h3 class=\"box-title m-b-20\">Introduzca su email</h3>\n                    <div class=\"form-group \">\n                        <div class=\"col-xs-12\">\n                            <input formControlName=\"email\" fname=\"email\" class=\"form-control\" type=\"email\"\n                                required placeholder=\"Email\">\n                        </div>\n                    </div>\n                    <div class=\"form-group text-center m-t-20\">\n                        <div class=\"col-xs-12\">\n                            <button class=\"btn btn-info btn-lg btn-block waves-effect waves-light\"\n                                type=\"submit\">Enviar email confirmación</button>\n                        </div>\n                    </div>\n                    <div class=\"form-group m-b-0\">\n                        <div class=\"col-sm-12 text-center\">\n                            <a routerLink=\"/login\" class=\"text-info m-l-5\"><b>Volver al login</b></a>\n                        </div>\n                    </div>\n                </form>\n            </div>\n        </div>\n    </div>\n</section>\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { PagesComponent } from './pages.component';\nimport { DashboardComponent } from './dashboard/dashboard.component';\nimport { NoPageFoundComponent } from './external/no-page-found/no-page-found.component';\n\n\nconst routes: Routes = [\n    {\n        path: '',\n        component: PagesComponent,\n        children: [\n            { path: 'dashboard', component: DashboardComponent },\n            { path: '', redirectTo: 'dashboard', pathMatch: 'full' },\n        ]\n    },\n\n];\n\n@NgModule({\n    imports: [RouterModule.forChild(routes)],\n    exports: [RouterModule]\n})\nexport class PagesRoutingModule { }\n","import { Component, OnInit } from '@angular/core';\n\ndeclare function init_plugins();\n@Component({\n    selector: 'app-pages',\n    templateUrl: './pages.component.html',\n    styleUrls: ['./pages.component.scss']\n})\nexport class PagesComponent implements OnInit {\n\n    constructor() { }\n\n    ngOnInit(): void {\n        init_plugins();\n    }\n\n}\n","<div class=\"container\">\n    <router-outlet></router-outlet>\n</div>\n","/**\n * Angular\n */\n\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\n\n/**\n * Modulos de rutas\n */\n\nimport { PagesRoutingModule } from './pages-routing.module';\n\n/**\n * Páginas de la web\n */\n\nimport { PagesComponent } from './pages.component';\nimport { DashboardComponent } from './dashboard/dashboard.component';\nimport { ResendComponent } from './external/resend/resend.component';\n\n\n\n\n@NgModule({\n    declarations: [\n        PagesComponent,\n        DashboardComponent,\n        ResendComponent\n    ],\n    imports: [\n        PagesRoutingModule,\n        CommonModule,\n        FormsModule,\n        ReactiveFormsModule,\n        RouterModule\n    ]\n})\n\nexport class PagesModule { }\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { URL_SERVICIOS } from 'src/config/config';\nimport Swal from 'sweetalert2';\nimport { catchError, map } from 'rxjs/operators';\nimport { throwError } from 'rxjs';\nimport { Router } from '@angular/router';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class RecoverPassService {\n\n\n\n    constructor(\n        private http: HttpClient,\n        private router: Router\n    ) { }\n\n    /**\n     * Función que cambia la contraseña del usuario\n     * @param email email del usuario a modificar\n     * @param nuevaPass nueva contraseña del usuario\n     */\n\n    cambiarContra(email: string, nuevaPass: string, token: string) {\n        let url = URL_SERVICIOS + '/recover/changePass';\n        url = url + '?token=' + token;\n        return this.http.post(url, { email, password: nuevaPass }).pipe(\n            map((resp: any) => {\n                Swal.fire('Contraseña cambiada', 'Contraseña cambiada correctamente', 'success');\n                this.router.navigate(['/login']);\n                return resp.usuario;\n            }), catchError((err) => {\n                Swal.fire('Error cambiando contraseña', 'Reintente:' + err.message, 'error');\n                return throwError(err);\n            })\n        )\n    }\n\n    /**\n     * Servicio que envía el email para reestablecer la contraseña al usuario\n     * @param email email al que enviar el correo\n     */\n\n    enviarEmailConfirmacion(email: string) {\n        const url = URL_SERVICIOS + '/recover/recover';\n        console.log(email);\n        return this.http.post(url, { email }).pipe(map((resp: any) => {\n            Swal.fire('Email enviado', 'Comprueba tu email para reestablecer la contraseña', 'success');\n        }), catchError((err) => {\n\n            Swal.fire('Error en el envio del email', err.error.message, 'error');\n            return throwError(err.message);\n        })\n        );\n    }\n\n    /**\n     * Servicio que reenvía el email de confirmación para activar la cuenta del usuario\n     * @param email email al que reenviar la confirmación\n     */\n\n    reenviarEmailConfirmacion(email: string) {\n        const url = URL_SERVICIOS + '/recover/resendEmail';\n        console.log(email);\n        return this.http.post(url, { email }).pipe(map((resp: any) => {\n            Swal.fire('Email de confirmación enviado', 'Comprueba tu email para activar tu cuenta', 'success');\n        }), catchError((err) => {\n            console.log(err);\n            Swal.fire('Error en el envio del email', err.error.message, 'error');\n            return throwError(err.message);\n        })\n        );\n    }\n\n\n    /**\n     * Función que comprueba que el token introducido sea correcto, si no lo es nos devuelve al login\n     * @param token token a comprobar\n     */\n    checkToken(token: string) {\n        let url = URL_SERVICIOS + '/recover';\n        url = url + '/checkToken/' + token;\n        return this.http.get(url).pipe(map((resp: any) => {\n            // Swal.fire('Usuario validado', resp.message, 'success');\n            return resp.usuario;\n        }), catchError((err) => {\n            console.log(err);\n            Swal.fire('Error al comprobar token', err.error.errors.message, 'error');\n            this.router.navigate(['/login']);\n            return throwError(err);\n        })\n        );\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { User } from '../models/User/User';\nimport { URL_SERVICIOS } from '../../config/config';\nimport { HttpClient } from '@angular/common/http';\nimport { map, catchError } from 'rxjs/operators';\nimport Swal from 'sweetalert2';\nimport { throwError } from 'rxjs';\nimport { Router } from '@angular/router';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class UserService {\n\n    usuario: User;\n    token: string;\n    constructor(\n        private http: HttpClient,\n        private router: Router\n    ) {\n        this.cargarStorage();\n    }\n\n\n    crearUsuario(usuario: User) {\n        const url = URL_SERVICIOS + '/usuario';\n        return this.http.post(url, usuario).pipe(map((resp: any) => {\n            Swal.fire('Usuario registrado', resp.message, 'success');\n            return resp.usuario;\n        }), catchError((err) => {\n            console.log(err);\n            Swal.fire('Error al registrar usuario', err.error.errors.message, 'error');\n            return throwError(err);\n        })\n        );\n    }\n\n    /**\n     * Función que a través de los parámetros de login que le llega intenta realizar el login del usuario\n     * obteniendo el token y los datos de ese usuario. Llamará a la función guardarStorage para almacenar\n     * los datos del usuario en el servicio.\n     * @param usuario usuario con el email y contraseñas introducidos por el usuario para el login\n     */\n\n    loginUsuario(usuario: User, recordar: boolean = false) {\n        const url = URL_SERVICIOS + '/login';\n        /**\n         * Guardamos el email si el usuario ha selccionado el recuerdame\n         */\n        if (recordar) {\n            localStorage.setItem('emailIdac', usuario.email);\n        } else {\n            localStorage.removeItem('emailIdac');\n        }\n        console.log('entro');\n        return this.http.post(url, usuario).pipe(map((resp: any) => {\n            // Swal.fire('Usuario logueado', 'Usuario autenticado correctamente', 'success');\n            console.log(resp);\n            const userResp: User = new User(\n                resp.usuario.email,\n                resp.usuario.password,\n                resp.usuario.nombre,\n                resp.usuario.cod_iracing.codigo,\n                resp.usuario.role,\n                resp.usuario.img,\n                resp.usuario.google,\n                resp.usuario.setup_pure,\n                resp.usuario.setup_vrs,\n                resp.usuario.setup_craig,\n                resp.usuario.activo,\n                resp.usuario._id\n            );\n            this.guardarStorage(resp.usuario._id, resp.token, userResp);\n            return userResp;\n        }), catchError((err) => {\n            Swal.fire('Error en el login', err.error.message, 'error');\n            return throwError(err);\n        })\n        );\n    }\n\n    /**\n     * Función que carga los datos del usuario en el servicio a partir del local\n     * storage del navegador del usuario\n     */\n\n    cargarStorage() {\n        if (localStorage.getItem('tokenIdac')) {\n            this.token = localStorage.getItem('tokenIdac');\n            this.usuario = JSON.parse(localStorage.getItem('usuarioIdac'));\n        } else {\n            this.token = '';\n            this.usuario = null;\n        }\n    }\n\n    /**\n     * Función que almacena en el local storage toda la información del usuario\n     * @param id id del usuario\n     * @param token token del usuario\n     * @param usuario datos del usuario\n     */\n\n    guardarStorage(id: string, token: string, usuario: User) {\n\n        localStorage.setItem('idIdac', id);\n        localStorage.setItem('tokenIdac', token);\n        /**\n         * No podemos guardar en el local storage un objeto, por lo que\n         * hay que transformarlo a string.\n         */\n        localStorage.setItem('usuarioIdac', JSON.stringify(usuario));\n\n        this.usuario = usuario;\n        this.token = token;\n    }\n\n    /**\n     * Función que limpia el local storage para sacar al usuario\n     */\n    logout() {\n        this.usuario = null;\n        this.token = '';\n        localStorage.removeItem('tokenIdac');\n        localStorage.removeItem('usuarioIdac');\n        localStorage.removeItem('idIdac');\n        this.router.navigate(['/login']);\n    }\n}\n","import { environment } from './../environments/environment';\r\nexport const URL_SERVICIOS = environment.URL_SERVICIOS;\r\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n    production: false,\n    URL_SERVICIOS: 'http://localhost:3000'\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"]}